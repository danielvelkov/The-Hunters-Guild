<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Create Hunting Quest</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      rel="stylesheet"
      type="text/css"
      media="screen"
      href="css/new-quest-post.css"
    />
    <link
      rel="stylesheet"
      href="https://code.jquery.com/ui/1.14.1/themes/base/jquery-ui.css"
    />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.14.1/jquery-ui.js"></script>
    <link
      href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  </head>
  <body>
    <h1><%= title %></h1>
    <main>
      <fieldset id="monster-forms">
        <legend>Monsters</legend>
        <button id="add-monster-button">+ Add Monster</button>
      </fieldset>

      <div class="flex-row">
        <!-- form is hidden by default. selecting a monster in the above select, shows the form. -->
        <form
          autocomplete="off"
          method="post"
          id="quest-post-form"
          style="display: none"
        >
          <fieldset id="quest-details">
            <legend>Quest Details</legend>
            <label for="quest-category">Category</label>
            <select name="quest-category" id="quest-category">
              <option
                value="Assignment"
                title="Main Story quests. Can only be done once."
              >
                Assignment
              </option>
              <option
                value="Optional"
                title="Non-essential quests. Can be done repeatedly."
              >
                Optional Quest
              </option>
              <option
                value="Event"
                title="Event Quests are quests that can only be completed during a specific time-frame, with these quests having unique rewards that cannot be obtained by finishing Assignments or Optional Quests."
              >
                Event Quest
              </option>
              <option value="Field Survey">Field Survey</option>
              <option value="Saved Investigation" selected="selected">
                Saved Investigation
              </option>
              <option value="Arena Quest">Arena quest</option>
              <option value="Challenge Quest">Challenge quest</option>
              <option value="Free Challenge Quest">Free challenge quest</option>
            </select>

            <label for="quest-star-rank">Star Rank</label>
            <select name="quest-star-rank" id="quest-star-rank">
              <option value="LOW">Low Rank</option>
              <option value="HIGH" selected="selected">High Rank</option>
              <option value="1">1⭐</option>
              <option value="2">2⭐⭐</option>
              <option value="3">3⭐⭐⭐</option>
              <option value="4">4⭐⭐⭐⭐</option>
              <option value="5">5⭐⭐⭐⭐⭐</option>
              <option value="6">6⭐⭐⭐⭐⭐⭐</option>
              <option value="7">7⭐⭐⭐⭐⭐⭐⭐</option>
              <option value="8">8⭐⭐⭐⭐⭐⭐⭐⭐</option>
              <option value="9">9⭐⭐⭐⭐⭐⭐⭐⭐⭐</option>
            </select>

            <label for="locale">Area</label>
            <select name="locale" id="locale"></select>

            <label for="quest-type">Type</label>
            <select name="quest-type" id="quest-type">
              <option
                value="Hunt"
                selected="selected"
                title="Capture or Slay a monster"
              >
                Hunt
              </option>
              <option
                value="Slay"
                title="Must slay the monster. Capturing it fails the quest."
              >
                Slay
              </option>
              <option
                value="Capture"
                title="Must capture the monster. Slaying it fails the quest."
              >
                Capture
              </option>
            </select>

            <label for="hunter-rank-requirement"
              ><abbr>HR</abbr>(Hunter Rank) Requirement</label
            >
            <input
              name="hunter-rank-requirement"
              id="hunter-rank-requirement"
              type="range"
              step="10"
              min="1"
              max="191"
              value="21"
              oninput="this.nextElementSibling.value = this.value+'+'"
            />
            <output>21+</output>

            <label for="time-limit">Time limit (min.)</label>
            <input
              name="time-limit"
              id="time-limit"
              type="range"
              step="5"
              min="15"
              max="60"
              value="35"
              oninput="this.nextElementSibling.value = this.value+' minutes'"
            />
            <output>35 minutes</output>

            <label for="cross-play-enabled">
              Cross-play ?
              <input
                type="checkbox"
                name="cross-play-enabled"
                id="cross-play-enabled"
                checked="checked"
              />
            </label>

            <label
              id="platform-options"
              for="platform-options-list"
              style="display: none"
            >
              Platform Selection
              <ul id="platform-options-list">
                <li>
                  <input type="checkbox" name="PC" />
                  PC
                </li>
                <li>
                  <input type="checkbox" name="PlayStation" />
                  PlayStation
                </li>
                <li>
                  <input type="checkbox" name="Xbox" />
                  Xbox
                </li>
              </ul>
            </label>

            <label for="bonus-rewards-enabled">
              Bonus Rewards ?
              <input
                type="checkbox"
                name="bonus-rewards-enabled"
                id="bonus-rewards-enabled"
                checked="checked"
              />
            </label>

            <select
              id="bonus-rewards"
              name="bonus-rewards[]"
              multiple="multiple"
            ></select>
          </fieldset>
          <button type="submit">Post</button>
        </form>

        <section id="quest-preview"></section>
      </div>
    </main>
  </body>
  <script>
      let monstersList = <%- JSON.stringify(monsters) -%>;
      let bonusQuestRewardsList  = <%- JSON.stringify(bonusQuestRewards) -%>;
      let monstersForms = [];
      let selectedMonsters = createObservableArray([], selectedMonstersChangeHandler);

      function createMonsterDataForm() {
        const formId = monstersForms.length;
        const monsterForm = $('<form>');
        monsterForm.attr('autocomplete', 'off');
        monsterForm.attr('id',`monster-form-${formId}`);
        monsterForm.attr('class','monster-form');

        monsterForm.append(`
          <label for="monster-select-${formId}">Large Monsters: </label>
          <select class="form-control monster-select" name="monster" id="monster-select-${formId}">
            <option></option>
            <% if (monsters) { %> <% monsters.forEach((monster) => { %>
            <option
              value="<%= monster.id %>"
              data-elements="<%= monster.weaknesses.elements.map((ew) => `${ew.name},${ew.icon}`).join('|') %>"
              data-ailments="<%= monster.weaknesses.ailments.map((ew) => `${ew.name},${ew.icon}`).join('|') %>"
              data-monster-icon="<%= monster.icon %>"
            >
              <%= monster.name %>
              <hr />
            </option>
            <% }) %> <% } %>
          </select>
        `);

        const monsterSelect = monsterForm.find(`#monster-select-${formId}`);

        monsterSelect.select2({
          placeholder: '-- Choose a monster --',
          allowClear: true,
          templateResult: function (item) {
            if (item.element?.dataset.monsterIcon)
              return $(`<span class='monster-select-content'>
                  <span class='monster-select-name'>
                  <img height='18' src="icons/Large Monster Icons/${
                    item.element?.dataset.monsterIcon
                  }.png"/>
                  <b>${item.text}</b>
                    </span>
                  <div class='monster-elements'>
                  Elem. Weak: ${item.element?.dataset.elements
                    .split('|')
                    .map((e) => {
                      const [name, icon] = e.split(',');
                      if (icon)
                        return `<img height='18' alt='${name}' title='${name}' src="icons/Status Icons/${icon}.png"' />`;
                      else return '';
                    })
                    .join('')}
                  </div>
                  <div class='monster-ailments'>
                  Status Weak: ${item.element?.dataset.ailments
                    .split('|')
                    .map((e) => {
                      const [name, icon] = e.split(',');
                      if (icon)
                        return `<img height='18' alt='${name}' title='${name}' src="icons/Status Icons/${icon}.png"' />`;
                      else return '';
                    })
                    .join('')}
                  </div>
              </span>`);
          },
        });

        const monsterFormDetails = $('<fieldset>')
        monsterFormDetails.append(`
          <legend>Monster Details</legend>
          <label for="monster-frenzied" id="monster-frenzied-label">
            Frenzied?
            <input type="checkbox" name="frenzied" id="monster-frenzied" />
          </label>
          <label for="monster-tempered" id="monster-tempered-label">
            Tempered?
            <input type="checkbox" name="tempered" id="monster-tempered" />
          </label>
          <label for="monster-arch-tempered" id="monster-arch-tempered-label">
            Arch-tempered?
            <input
              type="checkbox"
              name="arch-tempered"
              id="monster-arch-tempered"
            />
          </label>

          <label for="monster-strength">Monster Strength</label>
          <select id="monster-strength" name="monster-strength">
            <option value="1">✨</option>
            <option value="2">✨✨</option>
            <option value="3" selected="selected">✨✨✨</option>
            <option value="4">✨✨✨✨</option>
            <option value="5">✨✨✨✨✨</option>
          </select>

          <label for="monster-crown">Monster Crown 👑</label>
          <select id="monster-crown" name="monster-crown">
            <option value="Base" selected="selected">Base</option>
            <option value="Mini">Mini</option>
            <option value="Silver">Silver</option>
            <option value="Gold">Gold</option>
          </select>
        `)

        // Hide Hunting quest post form on monster selector clear
        monsterSelect.on('select2:clear',(e)=> {
          monsterFormDetails.detach();
          delete selectedMonsters[formId];
          if(!selectedMonsters.some(m => m))
            $('#quest-post-form').hide();
        });

        // Show monster form details on select
        monsterSelect.on('select2:select', function (e) {
          const data = e.params.data;
          if (!data.id){
            $('#quest-post-form').hide();
            monsterFormDetails.detach();
            return;
          }

          const monster = monstersList.find(m => m.id === data.id);
          monsterForm.append(monsterFormDetails);

          // Update monster List
          selectedMonsters[formId] = monster;

          //Enable monster variant checkboxes based on monster data

          if(monster.tempered){
            monsterFormDetails.find('#monster-tempered-label').show()
            monsterFormDetails.find('#monster-tempered-label > input').prop('disabled', false)
          }
          else{
            monsterFormDetails.find('#monster-tempered-label').hide()
            monsterFormDetails.find('#monster-tempered-label > input').prop('disabled', true)
          }

          if(monster.frenzied){
            monsterFormDetails.find('#monster-frenzied-label').show()
            monsterFormDetails.find('#monster-frenzied-label > input').prop('disabled', false)
          }
          else
          {
            monsterFormDetails.find('#monster-frenzied-label').hide()
            monsterFormDetails.find('#monster-frenzied-label > input').prop('disabled', true)
          }

          if(monster.arch_tempered){
            monsterFormDetails.find('#monster-arch-tempered-label').show()
            monsterFormDetails.find('#monster-arch-tempered-label > input').prop('disabled', false)
          }
          else{
            monsterFormDetails.find('#monster-arch-tempered-label').hide()
            monsterFormDetails.find('#monster-arch-tempered-label > input').prop('disabled', true)
          }

          monsterFormDetails.find('input[type="checkbox"]').prop('checked', false)

          monsterFormDetails.find('input[type="checkbox"]').click(function() {
            if ($(this).is(':checked')) {
              monsterFormDetails.find('input[type="checkbox"]').not(this).prop('disabled', true);
              monsterFormDetails.find('input[type="checkbox"]').not(this).prop('checked', false)
            } else {
              monsterFormDetails.find('input[type="checkbox"]').prop('disabled', false);
            }
          });
            // Quest Details Form display on select
            $('#quest-post-form').show();
      });
      monsterForm.on('change', (e) => $('#quest-preview').trigger('preview:update'))

      monstersForms.push(monsterForm);
      return monsterForm;
    }

    function selectedMonstersChangeHandler(){
      let monsterLocales = [];

      selectedMonsters.forEach(m=> {
          monsterLocales= monsterLocales.concat(m.locales);
      });

      if(selectedMonsters.filter(m => m).length === 2){
        const localeCounts = {};
        monsterLocales.forEach(str => {
          localeCounts[str] = (localeCounts[str] || 0) + 1;
        });

        // Filter strings that appear more than once
        monsterLocales = Object.keys(localeCounts).filter(str => localeCounts[str] > 1);
        if(monsterLocales.length === 0)
          monsterLocales = ['-- No Common Locale --']
      }
      $('#locale').html(monsterLocales.map((l,index) => `<option ${index === 0 ? 'selected' : ''} value="${l}">${l}</option>`))

      const questRewardsGroupsMap = {};
      bonusQuestRewardsList.forEach(qr => {
        // if monster does not figure in source enumeration
        if(qr.source && selectedMonsters.every(m => !qr.source.split(',').includes(m.name)))
          return;

        if(!questRewardsGroupsMap.hasOwnProperty(qr.type))
          questRewardsGroupsMap[qr.type] = [];
        questRewardsGroupsMap[qr.type].push(qr);
      })

      $('#bonus-rewards').html(Object.entries(questRewardsGroupsMap).reverse().map(([k,v]) => {
        let optGroupHTML = `<optgroup label="${k+'s'}"><option></option>`;
        optGroupHTML += v.sort((qr1,qr2) => qr1.rarity - qr2.rarity).map(qr =>
         `<option data-icon="${qr.icon === 'INVALID' ? 'ITEM_0001' : qr.icon }" data-color="${qr.iconColor}" value="${qr.id}">
           ${qr.name}
          </option>`).join('');
        optGroupHTML += '</optgroup>'
        return optGroupHTML;
      }).join(''));

      $('#bonus-rewards').select2({
          dropdownAutoWidth : true,
          multiple: true,
          placeholder: '-- Select Bonus Rewards --',
          templateResult: function (item) {
            if(item.element && item.text && item.id){
              const iconPath = `url('../icons/Item Icons/${item.element?.dataset.icon}.png')`;
              return $(`
                <span class='bonus-select-name' style="display:flex; gap:0.5em; align-items:center;">
                  <div class="item-img-container"
                    id="${item.id}"
                    style="--item-color: var(--${item.element?.dataset.color}); --item-icon:${iconPath}">
                    <img height='23' src="icons/Item Icons/${item.element?.dataset.icon}.png"/>
                  </div>
                <b>${item.text}</b>
                </span>
              `)
            }
            else if(item.text)
              return item.text;
          },
      });

      $('#quest-category').trigger('change');
    }

    $(document).ready(function () {

      $('#add-monster-button').click(e => {
        if(monstersForms.length === 2)
          return;
        $('#monster-forms').append(()=> createMonsterDataForm())
      })

      // Display Platform options depending on whether 'Cross-play' disabled
      $('#cross-play-enabled').click(function(){
        if(!$(this).is(':checked')){
            $('#platform-options').show()
            $('#platform-options * input').each((_,inputElem) => $(inputElem).prop('disabled', false))
        }
        else {
            $('#platform-options').hide()
            $('#platform-options * input').each((_,inputElem) => $(inputElem).prop('disabled', true))
        }
      });

      // Display Bonus Rewards depending on whether 'Bonus Rewards' enabled
      $('#bonus-rewards-enabled').click(function(){
        if(!$(this).is(':checked')){
            $('#bonus-rewards').next().hide()
            $('#bonus-rewards').prop('disabled', true)
        }
        else {
            $('#bonus-rewards').next().show()
            $('#bonus-rewards').prop('disabled', false)
        }
      });

      $('#quest-category').on('change', (e) => {
        const category = e.target.value;
          monstersForms.forEach(mf =>{
            const monsterCrownSelect = mf.find('#monster-crown');
            const label = mf.find("label[for='monster-crown']");
            if(category === 'Saved Investigation' ||
              category === 'Field Survey'
            ){
              label.show();
              monsterCrownSelect.show();
              monsterCrownSelect.prop('disabled',false);
            }
            else{
              label.hide();
              monsterCrownSelect.hide();
              monsterCrownSelect.prop('disabled',true);
            }
          })
      });

      $('#quest-post-form').on('submit',(e)=> {
        event.preventDefault();
        selectedMonsters.forEach((m,index)=> {
          console.log('Selected Monster data:')
          console.log(m)
          console.log('Monster Details Form data:')
          console.log(new FormData(monstersForms[index][0]));
        });
        console.log('Quest Details form data:')
        console.log(new FormData(event.target))
        // TODO - create hunting quest post in db
      });

      $('#quest-post-form').on('change', (e) => $('#quest-preview').trigger('preview:update'));

      $('#quest-preview').on('preview:update', (e) => {
        console.log('update preview');

        const questDetails = new FormData($('#quest-post-form')[0]);
        const monsterFormDataList = monstersForms.map(mf=> new FormData(mf[0])).filter(fd => fd.get('monster') != '');
        const selectedMonsterDetailsList = selectedMonsters.filter(m => m);

        if(monsterFormDataList.length === 0 ||
         monsterFormDataList.length  !== selectedMonsterDetailsList.length){
          $('#quest-preview').html('');
          return;
        }

        let questTitle = `${questDetails.get('quest-type')} `;

        if(selectedMonsterDetailsList.length === 1){
          const monsterName = `${monsterFormDataList[0].get('tempered') ? 'Tempered' : ''}
          ${monsterFormDataList[0].get('frenzied') ? 'Frenzied' : ''}
          ${monsterFormDataList[0].get('arch-tempered') ? 'Arch-Tempered' : ''} ${selectedMonsterDetailsList[0].name}`
          questTitle = questTitle + 'the ' + monsterName;
        }
        else {
          const monsterNames = [];
          monsterFormDataList.forEach((md,index) => {
            const monster = monstersList.find(m => m.id== md.get('monster'));
            const monsterName = `${md.get('tempered') ? 'Tempered' : ''}
            ${md.get('frenzied') ? 'Frenzied' : ''}
            ${md.get('arch-tempered') ? 'Arch-Tempered' : ''} ${monster.name}`
            monsterNames.push(monsterName);
          })


          if(monsterNames.every(mn => mn === monsterNames[0]))
            questTitle = questTitle + monsterNames.length + ' '+ monsterNames[0];
          else
           questTitle = questTitle +  monsterNames.join(' & ');
        }

        $('#quest-preview').html(`
          <div id="tabs">
            <ul>
              <li><a href="#tabs-quest-details">Quest Details</a></li>
              ${selectedMonsterDetailsList.map((m,i) => `<li><a href="#tabs-monster-${i}">${m.name}</a></li>`).join('')}
            </ul>
            <div id="tabs-quest-details">
              <table class="themetable" width="100%" align="center">
                <tbody>
                    <tr>
                      <th colspan="2" style="${getQuestCategoryStyle(questDetails.get('quest-category'))}">${questDetails.get('quest-category')}</th>
                      <th colspan="3" align="right">${questDetails.get('quest-star-rank')}⭐</th>
                    </tr>
                    <tr>
                      <th rowspan="2">Monsters:</th>
                      <th colspan="3" >
                        <div class="flex-row" style="justify-content:center;">
                        ${selectedMonsterDetailsList.map((m,index) =>
                          `<div class="flex-col" style="position:relative;">
                            ${monsterFormDataList[index].has('monster-crown') &&  monsterFormDataList[index].get('monster-crown') !== 'Base' ?
                            `<img height='25' title="${monsterFormDataList[index].get('monster-crown')}"
                            src="icons/${monsterFormDataList[index].get('monster-crown').toLowerCase()}-crown.png"
                            style="position:absolute; z-index: 1; top:0px; right:-10px;filter: drop-shadow(1px 1px 1px #222)
                            drop-shadow(-1px -1px 1px #222) drop-shadow(-1px 1px 0px #222) drop-shadow(1px -1px 0px #222);">` : ''}

                            <img height='75' title="${m.name}"
                              class="monster-image
                              ${monsterFormDataList[index].get('tempered') === 'on' ? 'tempered-outline' : ''}
                              ${monsterFormDataList[index].get('frenzied') === 'on' ? 'frenzied-outline' : ''}
                              "
                              src="icons/Large Monster Icons/${m.icon}.png"/>
                              <span style="margin-top:-1em; font-size:0.65em;">${'✨'.repeat(+monsterFormDataList[index].get('monster-strength'))}</span>
                            </div>`).join('')}
                        </div>
                      </th>
                    </tr>
                    <tr>
                      <th colspan="3">${questTitle}</th>
                    </tr>
                    <tr>
                      <th width="10%"></th>
                      <th width="20%">Quest Info:</th>
                      <th width="35%" align="left">Recom. Skills:</th>
                      <th width="35%" align="left">Bonus Rewards:</th>
                    </tr>
                    <tr>
                      <th>HR req:</th>
                      <td >${questDetails.get('hunter-rank-requirement')}</td>
                    </tr>
                    <tr>
                      <th>Area:</th>
                      <td>${questDetails.get('locale')}</td>
                    </tr>
                    <tr>
                      <th>Time Limit:</th>
                      <td>${questDetails.get('time-limit')} mins</td>
                    </tr>
                    <tr>
                      <th>Description:</th>
                      <td colspan="3"></td>
                    </tr>
                    <tr>
                      <th>Notes:</th>
                      <td colspan="3"></td>
                    </tr>
                </tbody>
              </table>
            </div>
            ${selectedMonsterDetailsList.map((m,i) =>
              `<div id="tabs-monster-${i}">
                <h2>${m.name}</h2>
                <h3>Damage Effectiveness</h3>
                <table style="width:100%;">
                  <tbody align="center">
                    <tr>
                      <th>Part</th>
                      <th>Slash</th>
                      <th>Blow</th>
                      <th>Shot</th>
                      <th>Fire</th>
                      <th>Water</th>
                      <th>Thunder</th>
                      <th>Ice</th>
                      <th>Dragon</th>
                      <th>Stun</th>
                      <th>Flash</th>
                    </tr>
                    ${m.part_dmg_effectiveness.map(de => {
                      let tableRow = '<tr>';
                      tableRow = tableRow.concat(`<td><img height="20" src="icons/Item Icons/${de.icon}.png"/> <b>${de.name}</b></td>`);
                      de.damages.forEach(d => {tableRow = tableRow.concat(`<td>${d.value > 45 ? '<b>'+d.value+'</b>' : d.value}</td>`)});
                      tableRow = tableRow.concat('</tr>');
                      return tableRow;
                    }).join('')}
                  </tbody>
                </table>
              </div>`).join('')}
          </div>
        `)
          $( "#tabs" ).tabs();
      })

      function getQuestCategoryStyle(category) {
        switch(category){
          case 'Assignment': return 'background-color: #a61713; color: white;'
          case 'Optional': return 'background-color: #6c808b; color: white;'
          case 'Event': return 'background-color: #d3b24b; color: black;'
          case 'Field Survey': return 'background-color: #9ea557; color: black;'
          case 'Saved Investigation': return 'background-color: #7db065; color: black;'
          case 'Arena Quest':
          case 'Free Challenge Quest':
          case 'Challenge Quest': return 'background-color: #4c4771; color: white;'
          default: return ''
        }
      }

    });

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy
    function createObservableArray(arr, callback) {
      return new Proxy(arr, {
        set(target, property, value) {
          target[property] = value; // Modify the array
          callback(target); // Trigger callback on modification
          return true;
        },
        deleteProperty(target, property) {
          delete target[property]; // Handle deletion
          callback(target);
          return true;
        }
      });
    }
  </script>
</html>
