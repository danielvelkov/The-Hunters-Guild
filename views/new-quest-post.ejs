<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Create Hunting Quest</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      rel="stylesheet"
      type="text/css"
      media="screen"
      href="css/new-quest-post.css"
    />
    <link
      rel="stylesheet"
      href="https://code.jquery.com/ui/1.14.1/themes/base/jquery-ui.css"
    />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.14.1/jquery-ui.js"></script>
    <link
      href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  </head>
  <body>
    <h1><%= title %></h1>
    <main>
      <fieldset id="monster-forms">
        <legend>Monsters</legend>
        <button id="add-monster-button">+ Add Monster</button>
      </fieldset>

      <div class="flex-row">
      <!-- form is hidden by default. selecting a monster in the above select, shows the form. -->
      <form
        autocomplete="off"
        method="post"
        id="quest-post-form"
        style="display: none"
      >
        <fieldset id="quest-details">
          <legend>Quest Details</legend>
          <label for="quest-category">Category</label>
          <select name="quest-category" id="quest-category">
            <option
              value="Assignment"
              title="Main Story quests. Can only be done once."
            >
              Assignment
            </option>
            <option
              value="Optional"
              title="Non-essential quests. Can be done repeatedly."
            >
              Optional Quest
            </option>
            <option
              value="Event"
              title="Event Quests are quests that can only be completed during a specific time-frame, with these quests having unique rewards that cannot be obtained by finishing Assignments or Optional Quests."
            >
              Event Quest
            </option>
            <option value="Field Survey">Field Survey</option>
            <option value="Saved Investigation" selected="selected">
              Saved Investigation
            </option>
            <option value="Arena Quest">Arena quest</option>
            <option value="Challenge Quest">Challenge quest</option>
            <option value="Free Challenge Quest">Free challenge quest</option>
          </select>

          <label for="quest-star-rank">Star Rank</label>
          <select name="quest-star-rank" id="quest-star-rank">
            <option value="LOW">Low Rank</option>
            <option value="HIGH" selected="selected">High Rank</option>
            <option value="1">1‚≠ê</option>
            <option value="2">2‚≠ê‚≠ê</option>
            <option value="3">3‚≠ê‚≠ê‚≠ê</option>
            <option value="4">4‚≠ê‚≠ê‚≠ê‚≠ê</option>
            <option value="5">5‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</option>
            <option value="6">6‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</option>
            <option value="7">7‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</option>
            <option value="8">8‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</option>
            <option value="9">9‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</option>
          </select>

          <label for="locale">Area</label>
          <select name="locale" id="locale"></select>

          <label for="quest-type">Type</label>
          <select name="quest-type" id="quest-type">
            <option
              value="Hunt"
              selected="selected"
              title="Capture or Slay a monster"
            >
              Hunt
            </option>
            <option
              value="Slay"
              title="Must slay the monster. Capturing it fails the quest."
            >
              Slay
            </option>
            <option
              value="Capture"
              title="Must capture the monster. Slaying it fails the quest."
            >
              Capture
            </option>
          </select>

          <label for="hunter-rank-requirement"
            ><abbr>HR</abbr>(Hunter Rank) Requirement</label
          >
          <input
            name="hunter-rank-requirement"
            id="hunter-rank-requirement"
            type="range"
            step="10"
            min="1"
            max="191"
            value="21"
            oninput="this.nextElementSibling.value = this.value+'+'"
          />
          <output>21+</output>

          <label for="time-limit">Time limit (min.)</label>
          <input
            name="time-limit"
            id="time-limit"
            type="range"
            step="5"
            min="15"
            max="60"
            value="35"
            oninput="this.nextElementSibling.value = this.value+' minutes'"
          />
          <output>35 minutes</output>

          <label for="cross-play-enabled">
            Cross-play?
            <input
              type="checkbox"
              name="cross-play-enabled"
              id="cross-play-enabled"
              checked="checked"
            />
          </label>

          <label
            id="platform-options"
            for="platform-options-list"
            style="display: none"
          >
            Platform Selection
            <ul id="platform-options-list">
              <li>
                <input type="checkbox" name="PC" />
                PC
              </li>
              <li>
                <input type="checkbox" name="PlayStation" />
                PlayStation
              </li>
              <li>
                <input type="checkbox" name="Xbox" />
                Xbox
              </li>
            </ul>
          </label>
        </fieldset>
        <button type="submit">Post</button>
      </form>

      <section id="quest-preview"></section>
      </div>
    </main>
  </body>
  <script>
    let monstersList = <%- JSON.stringify(monsters) -%>;
    let monstersForms = [];
    let selectedMonsters = createObservableArray([], selectedMonstersChangeHandler);

    function createMonsterDataForm() {
      const formId = monstersForms.length;
      const monsterForm = $('<form>');
      monsterForm.attr('autocomplete', 'off');
      monsterForm.attr('id',`monster-form-${formId}`);
      monsterForm.attr('class','monster-form');

      monsterForm.append(`
        <label for="monster-select-${formId}">Large Monsters: </label>
        <select class="form-control monster-select" name="monster" id="monster-select-${formId}">
          <option></option>
          <% if (monsters) { %> <% monsters.forEach((monster) => { %>
          <option
            value="<%= monster.id %>"
            data-elements="<%= monster.weaknesses.elements.map((ew) => `${ew.name},${ew.icon}`).join('|') %>"
            data-ailments="<%= monster.weaknesses.ailments.map((ew) => `${ew.name},${ew.icon}`).join('|') %>"
            data-monster-icon="<%= monster.icon %>"
          >
            <%= monster.name %>
            <hr />
          </option>
          <% }) %> <% } %>
        </select>
      `);

      const monsterSelect = monsterForm.find(`#monster-select-${formId}`);

      monsterSelect.select2({
        placeholder: '-- Choose a monster --',
        allowClear: true,
        templateResult: function (item) {
          if (item.element?.dataset.monsterIcon)
            return $(`<span class='monster-select-content'>
                <span class='monster-select-name'>
                <img height='18' src="icons/Large Monster Icons/${
                  item.element?.dataset.monsterIcon
                }.png"/>
                <b>${item.text}</b>
                  </span>
                <div class='monster-elements'>
                Elem. Weak: ${item.element?.dataset.elements
                  .split('|')
                  .map((e) => {
                    const [name, icon] = e.split(',');
                    if (icon)
                      return `<img height='18' alt='${name}' title='${name}' src="icons/Status Icons/${icon}.png"' />`;
                    else return '';
                  })
                  .join('')}
                </div>
                <div class='monster-ailments'>
                Status Weak: ${item.element?.dataset.ailments
                  .split('|')
                  .map((e) => {
                    const [name, icon] = e.split(',');
                    if (icon)
                      return `<img height='18' alt='${name}' title='${name}' src="icons/Status Icons/${icon}.png"' />`;
                    else return '';
                  })
                  .join('')}
                </div>
            </span>`);
        },
      });

      const monsterFormDetails = $('<fieldset>')
      monsterFormDetails.append(`
        <legend>Monster Details</legend>
        <label for="monster-frenzied" id="monster-frenzied-label">
          Frenzied?
          <input type="checkbox" name="frenzied" id="monster-frenzied" />
        </label>
        <label for="monster-tempered" id="monster-tempered-label">
          Tempered?
          <input type="checkbox" name="tempered" id="monster-tempered" />
        </label>
        <label for="monster-arch-tempered" id="monster-arch-tempered-label">
          Arch-tempered?
          <input
            type="checkbox"
            name="arch-tempered"
            id="monster-arch-tempered"
          />
        </label>

        <label for="monster-strength">Monster Strength</label>
        <select id="monster-strength" name="monster-strength">
          <option value="1">‚ú®</option>
          <option value="2">‚ú®‚ú®</option>
          <option value="3" selected="selected">‚ú®‚ú®‚ú®</option>
          <option value="4">‚ú®‚ú®‚ú®‚ú®</option>
          <option value="5">‚ú®‚ú®‚ú®‚ú®‚ú®</option>
        </select>

        <label for="monster-crown">Monster Crown üëë</label>
        <select id="monster-crown" name="monster-crown">
          <option value="Base" selected="selected">Base</option>
          <option value="Mini">Mini</option>
          <option value="Silver">Silver</option>
          <option value="Gold">Gold</option>
        </select>
      `)

      // Hide Hunting quest post form on monster selector clear
      monsterSelect.on('select2:clear',(e)=> {
        monsterFormDetails.detach();
        delete selectedMonsters[formId];
        if(!selectedMonsters.some(m => m))
          $('#quest-post-form').hide();
      });

      // Show monster form details on select
      monsterSelect.on('select2:select', function (e) {
        const data = e.params.data;
        if (!data.id){
          $('#quest-post-form').hide();
          monsterFormDetails.detach();
          return;
        }

        const monster = monstersList.find(m => m.id === data.id);
        monsterForm.append(monsterFormDetails);

        // Update monster List
        selectedMonsters[formId] = monster;

        //Enable monster variant checkboxes based on monster data

        if(monster.tempered){
          monsterFormDetails.find('#monster-tempered-label').show()
          monsterFormDetails.find('#monster-tempered-label > input').prop('disabled', false)
        }
        else{
          monsterFormDetails.find('#monster-tempered-label').hide()
          monsterFormDetails.find('#monster-tempered-label > input').prop('disabled', true)
        }

        if(monster.frenzied){
          monsterFormDetails.find('#monster-frenzied-label').show()
          monsterFormDetails.find('#monster-frenzied-label > input').prop('disabled', false)
        }
        else
        {
          monsterFormDetails.find('#monster-frenzied-label').hide()
          monsterFormDetails.find('#monster-frenzied-label > input').prop('disabled', true)
        }

        if(monster.arch_tempered){
          monsterFormDetails.find('#monster-arch-tempered-label').show()
          monsterFormDetails.find('#monster-arch-tempered-label > input').prop('disabled', false)
        }
        else{
          monsterFormDetails.find('#monster-arch-tempered-label').hide()
          monsterFormDetails.find('#monster-arch-tempered-label > input').prop('disabled', true)
        }

        // Quest Details Form display on select
        $('#quest-post-form').show();
      });

      monsterForm.on('change', (e) => $('#quest-preview').trigger('preview:update'))

      monstersForms.push(monsterForm);
      return monsterForm;
    }

    function selectedMonstersChangeHandler(){
      let monsterLocales = [];

      selectedMonsters.forEach(m=> {
          monsterLocales= monsterLocales.concat(m.locales);
      });

      if(selectedMonsters.filter(m => m).length === 2){
        const localeCounts = {};
        monsterLocales.forEach(str => {
          localeCounts[str] = (localeCounts[str] || 0) + 1;
        });

        // Filter strings that appear more than once
        monsterLocales = Object.keys(localeCounts).filter(str => localeCounts[str] > 1);
        if(monsterLocales.length === 0)
          monsterLocales = ['-- No Common Locale --']
      }
      $('#locale').html(monsterLocales.map((l,index) => `<option ${index === 0 ? 'selected' : ''} value="${l}">${l}</option>`))
      $('#quest-category').trigger('change');
    }

    $(document).ready(function () {

      $('#add-monster-button').click(e => {
        if(monstersForms.length === 2)
          return;
        $('#monster-forms').append(()=> createMonsterDataForm())
      })

      // Display Platform options depending on whether 'Cross-play' disabled
      $('#cross-play-enabled').click(function(){
        if(!$(this).is(':checked')){
            $('#platform-options').show()
            $('#platform-options * input').each((_,inputElem) => $(inputElem).prop('disabled', false))
        }
        else {
            $('#platform-options').hide()
            $('#platform-options * input').each((_,inputElem) => $(inputElem).prop('disabled', true))
        }
      });

      $('#quest-category').on('change', (e) => {
        const category = e.target.value;
          monstersForms.forEach(mf =>{
            const monsterCrownSelect = mf.find('#monster-crown');
            const label = mf.find("label[for='monster-crown']");
            if(category === 'Saved Investigation' ||
              category === 'Field Survey'
            ){
              label.show();
              monsterCrownSelect.show();
              monsterCrownSelect.prop('disabled',false);
            }
            else{
              label.hide();
              monsterCrownSelect.hide();
              monsterCrownSelect.prop('disabled',true);
            }
          })
      });

      $('#quest-post-form').on('submit',(e)=> {
        event.preventDefault();
        selectedMonsters.forEach((m,index)=> {
          console.log('Selected Monster data:')
          console.log(m)
          console.log('Monster Details Form data:')
          console.log(new FormData(monstersForms[index][0]));
        });
        console.log('Quest Details form data:')
        console.log(new FormData(event.target))
        // TODO - create hunting quest post in db
      });

      $('#quest-post-form').on('change', (e) => $('#quest-preview').trigger('preview:update'));

      $('#quest-preview').on('preview:update', (e) => {
        console.log('update preview')
      })

    });

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy
    function createObservableArray(arr, callback) {
      return new Proxy(arr, {
        set(target, property, value) {
          target[property] = value; // Modify the array
          callback(target); // Trigger callback on modification
          return true;
        },
        deleteProperty(target, property) {
          delete target[property]; // Handle deletion
          callback(target);
          return true;
        }
      });
    }
  </script>
</html>
